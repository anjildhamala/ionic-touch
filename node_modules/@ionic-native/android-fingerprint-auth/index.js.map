{"version":3,"sources":["../../../src/@ionic-native/plugins/android-fingerprint-auth/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,iBAAA,EAAmB,MAAA,EAAO,MAAO,oBAAA,CAAqB;AAyGxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6CG;AASH;IAA4C,0CAAiB;IAR7D;QAAA,qEAgGC;QAvFC;;WAEG;QACH,YAAM,GAmBF;YACF,qBAAqB,EAAE,uBAAuB;YAC9C,qBAAqB,EAAE,uBAAuB;YAC9C,qBAAqB,EAAE,uBAAuB;YAC9C,4BAA4B,EAAE,8BAA8B;YAC5D,iBAAiB,EAAE,mBAAmB;YACtC,yBAAyB,EAAE,2BAA2B;YACtD,6BAA6B,EAAE,+BAA+B;YAC9D,0CAA0C,EAAE,4CAA4C;YACxF,4BAA4B,EAAE,8BAA8B;YAC5D,kBAAkB,EAAE,oBAAoB;YACxC,qCAAqC,EAAE,uCAAuC;YAC9E,YAAY,EAAE,cAAc;YAC5B,cAAc,EAAE,gBAAgB;YAChC,WAAW,EAAE,aAAa;YAC1B,yBAAyB,EAAE,2BAA2B;YACtD,kBAAkB,EAAE,oBAAoB;YACxC,2BAA2B,EAAE,6BAA6B;YAC1D,kBAAkB,EAAE,oBAAoB;SACzC,CAAC;;IA8CJ,CAAC;IA5CC;;;;OAIG;IAEH,wCAAO,GAAP,UAAQ,OAAuB;QAC7B,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,wCAAO,GAAP,UAAQ,OAAuB;QAC7B,MAAM,CAAC;IACT,CAAC;IAED;;;OAGG;IAEH,4CAAW,GAAX;QACE,MAAM,CAAC;IACT,CAAC;IAED;;;;OAIG;IAEH,uCAAM,GAAN,UAAO,OAAyB;QAC9B,MAAM,CAAC;IACT,CAAC;IACI,iCAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,qCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IArCA;QADC,OAAO,EAAE;;;;yDAGT;IAQD;QADC,OAAO,EAAE;;;;yDAGT;IAOD;QADC,OAAO,EAAE;;;;6DAGT;IAQD;QADC,OAAO,EAAE;;;;wDAGT;IAjFU,sBAAsB;QARlC,MAAM,CAAC;YACN,UAAU,EAAE,wBAAwB;YACpC,MAAM,EAAE,yCAAyC;YACjD,SAAS,EAAE,iBAAiB;YAC5B,IAAI,EAAE,uEAAuE;YAC7E,SAAS,EAAE,CAAC,SAAS,CAAC;SACvB,CAAC;OAEW,sBAAsB,CAwFlC;IAAD,6BAAC;CAxFD,AAwFC,CAxF2C,iBAAiB,GAwF5D;SAxFY,sBAAsB","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface AFAAuthOptions {\n  /**\n   * Required\n   * Used as the alias for your key in the Android Key Store.\n   */\n  clientId: string;\n\n  /**\n   * Used to create credential string for encrypted token and as alias to retrieve the cipher.\n   */\n  username?: string;\n\n  /**\n   * Used to create credential string for encrypted token\n   */\n  password?: string;\n\n  /**\n   * Required for decrypt()\n   * Encrypted user credentials to decrypt upon successful authentication.\n   */\n  token?: string;\n\n  /**\n   * Set to true to remove the \"USE BACKUP\" button\n   */\n  disableBackup?: boolean;\n\n  /**\n   * Change the language. (en_US or es)\n   */\n  locale?: string;\n\n  /**\n   * The device max is 5 attempts. Set this parameter if you want to allow fewer than 5 attempts.\n   */\n  maxAttempts?: number;\n\n  /**\n   * Require the user to authenticate with a fingerprint to authorize every use of the key.\n   * New fingerprint enrollment will invalidate key and require backup authenticate to\n   * re-enable the fingerprint authentication dialog.\n   */\n  userAuthRequired?: boolean;\n\n  /**\n   * Set the title of the fingerprint authentication dialog.\n   */\n  dialogTitle?: string;\n\n  /**\n   * Set the message of the fingerprint authentication dialog.\n   */\n  dialogMessage?: string;\n\n  /**\n   * Set the hint displayed by the fingerprint icon on the fingerprint authentication dialog.\n   */\n  dialogHint?: string;\n}\n\nexport interface AFADecryptOptions {\n  /**\n   * Biometric authentication\n   */\n  withFingerprint: boolean;\n  /**\n   * Authentication using backup credential activity\n   */\n  withBackup: boolean;\n  /**\n   * FingerprintAuth.CipherMode.DECRYPT\n   * Decrypted password\n   */\n  password: string;\n}\n\nexport interface AFAEncryptResponse {\n  /**\n   * Biometric authentication\n   */\n  withFingerprint: boolean;\n  /**\n   * Authentication using backup credential activity\n   */\n  withBackup: boolean;\n  /**\n   * base64encoded string representation of user credentials\n   */\n  token: string;\n}\n\nexport interface AFAAvailableResponse {\n  isAvailable: boolean;\n  isHardwareDetected: boolean;\n  hasEnrolledFingerprints: boolean;\n}\n\nexport interface AFADeleteOptions {\n  clientId: string;\n  username: string;\n}\n\n/**\n * @name Android Fingerprint Auth\n * @description\n * This plugin will open a native dialog fragment prompting the user to authenticate using their fingerprint. If the device has a secure lockscreen (pattern, PIN, or password), the user may opt to authenticate using that method as a backup.\n * @usage\n * ```typescript\n * import { AndroidFingerprintAuth } from '@ionic-native/android-fingerprint-auth';\n *\n * constructor(private androidFingerprintAuth: AndroidFingerprintAuth) { }\n *\n * ...\n *\n *\n * this.androidFingerprintAuth.isAvailable()\n *   .then((result)=> {\n *     if(result.isAvailable){\n *       // it is available\n *\n *       this.androidFingerprintAuth.encrypt({ clientId: 'myAppName', username: 'myUsername', password: 'myPassword' })\n *         .then(result => {\n *            if (result.withFingerprint) {\n *                console.log('Successfully encrypted credentials.');\n *                console.log('Encrypted credentials: ' + result.token);\n *            } else if (result.withBackup) {\n *              console.log('Successfully authenticated with backup password!');\n *            } else console.log('Didn\\'t authenticate!');\n *         })\n *         .catch(error => {\n *            if (error === this.androidFingerprintAuth.ERRORS.FINGERPRINT_CANCELLED) {\n *              console.log('Fingerprint authentication cancelled');\n *            } else console.error(error)\n *         });\n *\n *     } else {\n *       // fingerprint auth isn't available\n *     }\n *   })\n *   .catch(error => console.error(error));\n * ```\n * @interfaces\n * AFAAuthOptions\n * AFAEncryptResponse\n * AFADecryptOptions\n * AFAAvailableResponse\n * AFADeleteOptions\n */\n@Plugin({\n  pluginName: 'AndroidFingerprintAuth',\n  plugin: 'cordova-plugin-android-fingerprint-auth',\n  pluginRef: 'FingerprintAuth',\n  repo: 'https://github.com/mjwheatley/cordova-plugin-android-fingerprint-auth',\n  platforms: ['Android']\n})\n\nexport class AndroidFingerprintAuth extends IonicNativePlugin {\n  /**\n   * Convenience property containing all possible errors\n   */\n  ERRORS: {\n    BAD_PADDING_EXCEPTION: string;\n    CERTIFICATE_EXCEPTION: string;\n    FINGERPRINT_CANCELLED: string;\n    FINGERPRINT_DATA_NOT_DELETED: string;\n    FINGERPRINT_ERROR: string;\n    FINGERPRINT_NOT_AVAILABLE: string;\n    FINGERPRINT_PERMISSION_DENIED: string;\n    FINGERPRINT_PERMISSION_DENIED_SHOW_REQUEST: string;\n    ILLEGAL_BLOCK_SIZE_EXCEPTION: string;\n    INIT_CIPHER_FAILED: string;\n    INVALID_ALGORITHM_PARAMETER_EXCEPTION: string;\n    IO_EXCEPTION: string;\n    JSON_EXCEPTION: string;\n    MINIMUM_SDK: string;\n    MISSING_ACTION_PARAMETERS: string;\n    MISSING_PARAMETERS: string;\n    NO_SUCH_ALGORITHM_EXCEPTION: string;\n    SECURITY_EXCEPTION: string;\n  } = {\n    BAD_PADDING_EXCEPTION: 'BAD_PADDING_EXCEPTION',\n    CERTIFICATE_EXCEPTION: 'CERTIFICATE_EXCEPTION',\n    FINGERPRINT_CANCELLED: 'FINGERPRINT_CANCELLED',\n    FINGERPRINT_DATA_NOT_DELETED: 'FINGERPRINT_DATA_NOT_DELETED',\n    FINGERPRINT_ERROR: 'FINGERPRINT_ERROR',\n    FINGERPRINT_NOT_AVAILABLE: 'FINGERPRINT_NOT_AVAILABLE',\n    FINGERPRINT_PERMISSION_DENIED: 'FINGERPRINT_PERMISSION_DENIED',\n    FINGERPRINT_PERMISSION_DENIED_SHOW_REQUEST: 'FINGERPRINT_PERMISSION_DENIED_SHOW_REQUEST',\n    ILLEGAL_BLOCK_SIZE_EXCEPTION: 'ILLEGAL_BLOCK_SIZE_EXCEPTION',\n    INIT_CIPHER_FAILED: 'INIT_CIPHER_FAILED',\n    INVALID_ALGORITHM_PARAMETER_EXCEPTION: 'INVALID_ALGORITHM_PARAMETER_EXCEPTION',\n    IO_EXCEPTION: 'IO_EXCEPTION',\n    JSON_EXCEPTION: 'JSON_EXCEPTION',\n    MINIMUM_SDK: 'MINIMUM_SDK',\n    MISSING_ACTION_PARAMETERS: 'MISSING_ACTION_PARAMETERS',\n    MISSING_PARAMETERS: 'MISSING_PARAMETERS',\n    NO_SUCH_ALGORITHM_EXCEPTION: 'NO_SUCH_ALGORITHM_EXCEPTION',\n    SECURITY_EXCEPTION: 'SECURITY_EXCEPTION'\n  };\n\n  /**\n   * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.\n   * @param {AFAAuthOptions} options Options\n   * @returns {Promise<AFAEncryptResponse>}\n   */\n  @Cordova()\n  encrypt(options: AFAAuthOptions): Promise<AFAEncryptResponse> {\n    return;\n  }\n\n  /**\n   * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.\n   * @param {AFAAuthOptions} options Options\n   * @returns {Promise<AFADecryptOptions>}\n   */\n  @Cordova()\n  decrypt(options: AFAAuthOptions): Promise<AFADecryptOptions> {\n    return;\n  }\n\n  /**\n   * Check if service is available\n   * @returns {Promise<AFAAvailableResponse>} Returns a Promise that resolves if fingerprint auth is available on the device\n   */\n  @Cordova()\n  isAvailable(): Promise<AFAAvailableResponse> {\n    return;\n  }\n\n  /**\n   * Delete the cipher used for encryption and decryption by username\n   * @param {AFADeleteOptions} options Options\n   * @returns {Promise<{ deleted: boolean }>} Returns a Promise that resolves if the cipher was successfully deleted\n   */\n  @Cordova()\n  delete(options: AFADeleteOptions): Promise<{ deleted: boolean }> {\n    return;\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}