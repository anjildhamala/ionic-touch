{"version":3,"sources":["../../../src/@ionic-native/plugins/touch-id/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAGxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAwCG;AASH;IAA6B,2BAAiB;IAA9C;;IAoDA,CAAC;IAlDC;;;;OAIG;IAEH,6BAAW,GAAX,cAA8B,MAAM,CAAC,CAAC,CAAC;IAEvC;;;;;OAKG;IAEH,mCAAiB,GAAjB,UAAkB,OAAe,IAAkB,MAAM,CAAC,CAAC,CAAC;IAE5D;;;;;OAKG;IAEH,6DAA2C,GAA3C,UAA4C,OAAe,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEtF;;;;;;OAMG;IAEH,kFAAgE,GAAhE,UAAiE,OAAe,EAAE,kBAA0B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAEvI;;;;OAIG;IAEH,8CAA4B,GAA5B,cAA+C,MAAM,CAAC,CAAC,CAAC;IAEnD,kBAAU,GAA0B;QAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;KACnB,CAAC;IACF,kBAAkB;IACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;IA3CA;QADC,OAAO,EAAE;;;;8CAC6B;IASvC;QADC,OAAO,EAAE;;;;oDACkD;IAS5D;QADC,OAAO,EAAE;;;;8EAC4E;IAUtF;QADC,OAAO,EAAE;;;;mGAC6H;IAQvI;QADC,OAAO,EAAE;;;;+DAC8C;IA5C7C,OAAO;QARnB,MAAM,CAAC;YACN,UAAU,EAAE,SAAS;YACrB,MAAM,EAAE,yBAAyB;YACjC,SAAS,EAAE,iBAAiB;YAC5B,IAAI,EAAE,2DAA2D;YACjE,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;OAEW,OAAO,CAoDnB;IAAD,cAAC;CApDD,AAoDC,CApD4B,iBAAiB,GAoD7C;SApDY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\n\n\n/**\n * @name Touch ID\n * @description\n * Scan the fingerprint of a user with the TouchID sensor.\n *\n * Requires Cordova plugin: `cordova-plugin-touch-id`. For more info, please see the [TouchID plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-touch-id).\n *\n * @usage\n * ```typescript\n * import { TouchID } from '@ionic-native/touch-id';\n *\n * constructor(private touchId: TouchID) { }\n *\n * ...\n *\n * this.touchId.isAvailable()\n *   .then(\n *     res => console.log('TouchID is available!'),\n *     err => console.error('TouchID is not available', err)\n *   );\n *\n * this.touchId.verifyFingerprint('Scan your fingerprint please')\n *   .then(\n *     res => console.log('Ok', res),\n *     err => console.error('Error', err)\n *   );\n * ```\n *\n * ### Error Codes\n *\n * The plugin will reject for various reasons. Your app will most likely need to respond to the cases differently.\n *\n * Here is a list of some of the error codes:\n *\n *  -  `-1` - Fingerprint scan failed more than 3 times\n *  -  `-2` or `-128` - User tapped the 'Cancel' button\n *  -  `-3` - User tapped the 'Enter Passcode' or 'Enter Password' button\n *  -  `-4` - The scan was cancelled by the system (Home button for example)\n *  -  `-6` - TouchID is not Available\n *  -  `-8` - TouchID is locked out from too many tries\n */\n@Plugin({\n  pluginName: 'TouchID',\n  plugin: 'cordova-plugin-touch-id',\n  pluginRef: 'plugins.touchid',\n  repo: 'https://github.com/EddyVerbruggen/cordova-plugin-touch-id',\n  platforms: ['iOS']\n})\n\nexport class TouchID extends IonicNativePlugin {\n\n  /**\n   * Checks Whether TouchID is available or not.\n   *\n   * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.\n   */\n  @Cordova()\n  isAvailable(): Promise<any> { return; }\n\n  /**\n   * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, brings up standard system passcode screen.\n   *\n   * @param {string} message  The message to display\n   * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\n   */\n  @Cordova()\n  verifyFingerprint(message: string): Promise<any> { return; }\n\n  /**\n   * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).\n   *\n   * @param {string} message  The message to display\n   * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\n   */\n  @Cordova()\n  verifyFingerprintWithCustomPasswordFallback(message: string): Promise<any> { return; }\n\n  /**\n   * Show TouchID dialog with custom 'Enter Password' message and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).\n   *\n   * @param {string} message  The message to display\n   * @param {string} enterPasswordLabel  Custom text for the 'Enter Password' button\n   * @returns {Promise<any>} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\n   */\n  @Cordova()\n  verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel(message: string, enterPasswordLabel: string): Promise<any> { return; }\n\n  /**\n   * Checks if the fingerprint database changed.\n   *\n   * @returns {Promise<any>} Returns a Promise that resolves if yes, rejects if no.\n   */\n  @Cordova()\n  didFingerprintDatabaseChange(): Promise<any> { return; }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}